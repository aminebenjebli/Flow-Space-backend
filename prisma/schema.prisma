generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  email            String    @unique
  name             String
  bio              String?
  password         String
  profilePicture   String?
  otpCode          String?
  otpCodeExpiresAt DateTime?
  isEmailVerified  Boolean   @default(false)

  // Relations
  tasks             Task[]
  blacklistedTokens BlacklistedToken[]
  teamMemberships   TeamMember[] // <-- back-relation ajouté
  ownedProjects     Project[]          @relation("ProjectOwner")
}

model BlacklistedToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  userId    String   @db.ObjectId
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@index([userId])
}

model Task {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?  @db.ObjectId
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@index([projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

model Team {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())

  // Relations
  members  TeamMember[]
  projects Project[]
  invites  TeamInvite[] // <-- back-relation ajouté

  @@index([name])
}

model TeamMember {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId   String   @db.ObjectId
  userId   String   @db.ObjectId
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Rels
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId]) // un seul enregistrement par user dans un team
  @@index([userId])
  @@index([teamId])
}

model TeamInvite {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  teamId     String    @db.ObjectId
  email      String
  token      String    @unique
  role       TeamRole  @default(MEMBER)
  expiresAt  DateTime
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
  @@index([email])
  @@index([expiresAt])
}

model Project {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  visibility  ProjectVisibility @default(PRIVATE)
  createdAt   DateTime          @default(now())

  // Relations
  ownerId String @db.ObjectId
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  teamId String? @db.ObjectId
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: SetNull)

  tasks Task[]

  @@unique([ownerId, name]) // nom unique par propriétaire pour projets persos
  @@index([teamId])
  @@index([ownerId])
  @@index([visibility])
}
